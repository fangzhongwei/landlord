// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/depositrequest.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from src/depositrequest.proto</summary>
public static partial class DepositrequestReflection {

  #region Descriptor
  /// <summary>File descriptor for src/depositrequest.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static DepositrequestReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChhzcmMvZGVwb3NpdHJlcXVlc3QucHJvdG8ioAEKCkRlcG9zaXRSZXESEwoL",
          "Y2hhbm5lbENvZGUYASABKAkSEQoJcHJpY2VDb2RlGAIgASgJEg0KBXByaWNl",
          "GAMgASgJEhUKDWRpYW1vbmRBbW91bnQYBCABKAUSDAoEZXh0MRgFIAEoCRIM",
          "CgRleHQyGAYgASgJEgwKBGV4dDMYByABKAkSDAoEZXh0NBgIIAEoCRIMCgRl",
          "eHQ1GAkgASgJQi0KK2NvbS5sYXdzb2ZuYXR1cmUuYXBpZ2F0ZXdheS5kb21h",
          "aW4uaHR0cC5yZXFiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::DepositReq), global::DepositReq.Parser, new[]{ "ChannelCode", "PriceCode", "Price", "DiamondAmount", "Ext1", "Ext2", "Ext3", "Ext4", "Ext5" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class DepositReq : pb::IMessage<DepositReq> {
  private static readonly pb::MessageParser<DepositReq> _parser = new pb::MessageParser<DepositReq>(() => new DepositReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DepositReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DepositrequestReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DepositReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DepositReq(DepositReq other) : this() {
    channelCode_ = other.channelCode_;
    priceCode_ = other.priceCode_;
    price_ = other.price_;
    diamondAmount_ = other.diamondAmount_;
    ext1_ = other.ext1_;
    ext2_ = other.ext2_;
    ext3_ = other.ext3_;
    ext4_ = other.ext4_;
    ext5_ = other.ext5_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DepositReq Clone() {
    return new DepositReq(this);
  }

  /// <summary>Field number for the "channelCode" field.</summary>
  public const int ChannelCodeFieldNumber = 1;
  private string channelCode_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ChannelCode {
    get { return channelCode_; }
    set {
      channelCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "priceCode" field.</summary>
  public const int PriceCodeFieldNumber = 2;
  private string priceCode_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PriceCode {
    get { return priceCode_; }
    set {
      priceCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "price" field.</summary>
  public const int PriceFieldNumber = 3;
  private string price_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Price {
    get { return price_; }
    set {
      price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "diamondAmount" field.</summary>
  public const int DiamondAmountFieldNumber = 4;
  private int diamondAmount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DiamondAmount {
    get { return diamondAmount_; }
    set {
      diamondAmount_ = value;
    }
  }

  /// <summary>Field number for the "ext1" field.</summary>
  public const int Ext1FieldNumber = 5;
  private string ext1_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ext1 {
    get { return ext1_; }
    set {
      ext1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ext2" field.</summary>
  public const int Ext2FieldNumber = 6;
  private string ext2_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ext2 {
    get { return ext2_; }
    set {
      ext2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ext3" field.</summary>
  public const int Ext3FieldNumber = 7;
  private string ext3_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ext3 {
    get { return ext3_; }
    set {
      ext3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ext4" field.</summary>
  public const int Ext4FieldNumber = 8;
  private string ext4_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ext4 {
    get { return ext4_; }
    set {
      ext4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ext5" field.</summary>
  public const int Ext5FieldNumber = 9;
  private string ext5_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ext5 {
    get { return ext5_; }
    set {
      ext5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DepositReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DepositReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ChannelCode != other.ChannelCode) return false;
    if (PriceCode != other.PriceCode) return false;
    if (Price != other.Price) return false;
    if (DiamondAmount != other.DiamondAmount) return false;
    if (Ext1 != other.Ext1) return false;
    if (Ext2 != other.Ext2) return false;
    if (Ext3 != other.Ext3) return false;
    if (Ext4 != other.Ext4) return false;
    if (Ext5 != other.Ext5) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ChannelCode.Length != 0) hash ^= ChannelCode.GetHashCode();
    if (PriceCode.Length != 0) hash ^= PriceCode.GetHashCode();
    if (Price.Length != 0) hash ^= Price.GetHashCode();
    if (DiamondAmount != 0) hash ^= DiamondAmount.GetHashCode();
    if (Ext1.Length != 0) hash ^= Ext1.GetHashCode();
    if (Ext2.Length != 0) hash ^= Ext2.GetHashCode();
    if (Ext3.Length != 0) hash ^= Ext3.GetHashCode();
    if (Ext4.Length != 0) hash ^= Ext4.GetHashCode();
    if (Ext5.Length != 0) hash ^= Ext5.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ChannelCode.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ChannelCode);
    }
    if (PriceCode.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(PriceCode);
    }
    if (Price.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Price);
    }
    if (DiamondAmount != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(DiamondAmount);
    }
    if (Ext1.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Ext1);
    }
    if (Ext2.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Ext2);
    }
    if (Ext3.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Ext3);
    }
    if (Ext4.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Ext4);
    }
    if (Ext5.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(Ext5);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ChannelCode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelCode);
    }
    if (PriceCode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PriceCode);
    }
    if (Price.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Price);
    }
    if (DiamondAmount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiamondAmount);
    }
    if (Ext1.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ext1);
    }
    if (Ext2.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ext2);
    }
    if (Ext3.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ext3);
    }
    if (Ext4.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ext4);
    }
    if (Ext5.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ext5);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DepositReq other) {
    if (other == null) {
      return;
    }
    if (other.ChannelCode.Length != 0) {
      ChannelCode = other.ChannelCode;
    }
    if (other.PriceCode.Length != 0) {
      PriceCode = other.PriceCode;
    }
    if (other.Price.Length != 0) {
      Price = other.Price;
    }
    if (other.DiamondAmount != 0) {
      DiamondAmount = other.DiamondAmount;
    }
    if (other.Ext1.Length != 0) {
      Ext1 = other.Ext1;
    }
    if (other.Ext2.Length != 0) {
      Ext2 = other.Ext2;
    }
    if (other.Ext3.Length != 0) {
      Ext3 = other.Ext3;
    }
    if (other.Ext4.Length != 0) {
      Ext4 = other.Ext4;
    }
    if (other.Ext5.Length != 0) {
      Ext5 = other.Ext5;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          ChannelCode = input.ReadString();
          break;
        }
        case 18: {
          PriceCode = input.ReadString();
          break;
        }
        case 26: {
          Price = input.ReadString();
          break;
        }
        case 32: {
          DiamondAmount = input.ReadInt32();
          break;
        }
        case 42: {
          Ext1 = input.ReadString();
          break;
        }
        case 50: {
          Ext2 = input.ReadString();
          break;
        }
        case 58: {
          Ext3 = input.ReadString();
          break;
        }
        case 66: {
          Ext4 = input.ReadString();
          break;
        }
        case 74: {
          Ext5 = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
